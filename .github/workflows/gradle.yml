# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 저장소 Checkout
        uses: actions/checkout@v3

      - name: 스프링부트 애플리케이션 빌드 # (1)
        run: ./gradlew build

      - name: 도커 이미지 빌드 # (2)
        run: docker build -t kimjuyoung0923>/miner .

      - name: Docker Hub 로그인 # (3)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Hub 퍼블리시 # (4)
        run: docker push kimjuyoung0923/miner

      - name: WAS 인스턴스 접속 및 애플리케이션 실행 # (5)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker stop $(docker ps -a -q) 
            docker rm $(docker ps -a -q) 
            docker pull kimjuyoung0923/miner
            docker run -d -p 8080:8080 --name miner kimjuyoung0923/miner

# permissions:
#   contents: read

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'adopt'
#     - name: Build with Gradle
#       uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#       with:
#         arguments: build
        
#     #아티펙트 업로드
#     - name: Upload artifact
#       uses: actions/upload-artifact@v3
#       with:
#         name: cicdsample
#         path: build/libs/*.jar

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#     ## 빌드했던거 받기
#       - name: Download artifact
#         uses: actions/download-artifact@v2
#         with:
#           name: cicdsample
          
# #       - name: Setup SSH
# #         uses: webfactory/ssh-agent@v0.5.4
# #         with:
# #           ssh-private-key: ${{ secrets.SSH_KEY }}
#       # 깃허브 액션 러너의 아이피를 얻어온다.
#       - name: Get Github action IP
#         id: ip
#         uses: haythem/public-ip@v1.2
      
#       # SCP로 서버로 전송
#       - name: SCP transfer
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USERNAME }}
#           password: ${{ secrets.SERVER_PASSWORD }}
#           port: ${{ secrets.SERVER_PORT }}
#           rm: true
#           source: ${{ secrets.SOURCE_PATH }}
#           target: ${{ secrets.DIST_PATH }}
#           ## 작업에 사용했던 dist 디렉토리를 경로상에서 제거
#           strip_components: 1


#       - name: Execute remote commands
#         run: |
#           ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_ADDR }} "sudo fuser -k 8080/tcp"
#           ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_ADDR }} "
      
      # 내가 만든 서버 스크립트 실행
      - name: Execute Server Init Script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_ADDR }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script_stop: true
          script: | 
            sh action_deploy.sh


